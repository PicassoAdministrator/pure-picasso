generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// User Modoule
enum UserStatus {
  INACTIVE
  ACTIVE
  BLOCKED
}

model User {
  id              BigInt      @id @default(autoincrement())
  email           String      @unique
  password        String?
  country         String?
  timezone        String?
  name            String?
  roleId          BigInt
  status          UserStatus  @default(INACTIVE)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  lastSignInAt    DateTime?
  emailVerifiedAt DateTime?
  isTrashed       Boolean     @default(false)
  avatar          String?
  invitedByUserId BigInt?
  isProtected     Boolean     @default(false)
  role            UserRole    @relation(fields: [roleId], references: [id])
  systemLog       SystemLog[]
  accounts        Account[]
  Session         Session[]

  @@index([invitedByUserId])
  @@index([roleId])
  @@index([status])
}

model UserRole {
  id              BigInt               @id @default(autoincrement())
  slug            String               @unique
  name            String               @unique
  description     String?
  isTrashed       Boolean              @default(false)
  createdByUserId BigInt?
  createdAt       DateTime             @default(now())
  isProtected     Boolean              @default(false)
  isDefault       Boolean              @default(false)
  users           User[]
  permissions     UserRolePermission[]
}

model UserPermission {
  id              BigInt               @id @default(autoincrement())
  slug            String               @unique
  name            String
  description     String?
  createdByUserId BigInt?
  createdAt       DateTime             @default(now())
  roles           UserRolePermission[]
}

model UserRolePermission {
  id           BigInt   @id @default(autoincrement())
  roleId       BigInt
  permissionId BigInt
  assignedAt   DateTime @default(now())

  role       UserRole       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission UserPermission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([roleId, permissionId])
}

model Account {
  id                BigInt  @id @default(autoincrement())
  userId            BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "provider_providerAccountId")
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique
  userId       BigInt
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SystemLog {
  id          BigInt   @id @default(autoincrement())
  userId      BigInt
  createdAt   DateTime @default(now())
  entityId    BigInt?
  entityType  String?
  event       String?
  description String?
  ipAddress   String?
  meta        String?

  user User @relation(fields: [userId], references: [id])

  @@index([userId])
}
